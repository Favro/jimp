{"version":3,"file":"index.js","names":["mask","src","x","y","cb","constructor","throwError","call","Math","round","w","bitmap","width","h","height","baseImage","scanQuiet","sx","sy","idx","destX","destY","dstIdx","getPixelIndex","data","avg","isNodePattern"],"sources":["../src/index.js"],"sourcesContent":["import { isNodePattern, throwError } from '@jimp/utils';\n\n/**\n * Masks a source image on to this image using average pixel colour. A completely black pixel on the mask will turn a pixel in the image completely transparent.\n * @param {Jimp} src the source Jimp instance\n * @param {number} x the horizontal position to blit the image\n * @param {number} y the vertical position to blit the image\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  mask(src, x = 0, y = 0, cb) {\n    if (!(src instanceof this.constructor)) {\n      return throwError.call(this, 'The source must be a Jimp image', cb);\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const w = this.bitmap.width;\n    const h = this.bitmap.height;\n    const baseImage = this;\n\n    src.scanQuiet(0, 0, src.bitmap.width, src.bitmap.height, function(\n      sx,\n      sy,\n      idx\n    ) {\n      const destX = x + sx;\n      const destY = y + sy;\n\n      if (destX >= 0 && destY >= 0 && destX < w && destY < h) {\n        const dstIdx = baseImage.getPixelIndex(destX, destY);\n        const { data } = this.bitmap;\n        const avg = (data[idx + 0] + data[idx + 1] + data[idx + 2]) / 3;\n\n        baseImage.bitmap.data[dstIdx + 3] *= avg / 255;\n      }\n    });\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eACe;EAAA,OAAO;IACpBA,IADoB,gBACfC,GADe,EACQ;MAAA,IAAlBC,CAAkB,uEAAd,CAAc;MAAA,IAAXC,CAAW,uEAAP,CAAO;MAAA,IAAJC,EAAI;;MAC1B,IAAI,EAAEH,GAAG,YAAY,KAAKI,WAAtB,CAAJ,EAAwC;QACtC,OAAOC,iBAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,iCAAtB,EAAyDH,EAAzD,CAAP;MACD;;MAED,IAAI,OAAOF,CAAP,KAAa,QAAb,IAAyB,OAAOC,CAAP,KAAa,QAA1C,EAAoD;QAClD,OAAOG,iBAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,yBAAtB,EAAiDH,EAAjD,CAAP;MACD,CAPyB,CAS1B;;;MACAF,CAAC,GAAGM,IAAI,CAACC,KAAL,CAAWP,CAAX,CAAJ;MACAC,CAAC,GAAGK,IAAI,CAACC,KAAL,CAAWN,CAAX,CAAJ;MAEA,IAAMO,CAAC,GAAG,KAAKC,MAAL,CAAYC,KAAtB;MACA,IAAMC,CAAC,GAAG,KAAKF,MAAL,CAAYG,MAAtB;MACA,IAAMC,SAAS,GAAG,IAAlB;MAEAd,GAAG,CAACe,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoBf,GAAG,CAACU,MAAJ,CAAWC,KAA/B,EAAsCX,GAAG,CAACU,MAAJ,CAAWG,MAAjD,EAAyD,UACvDG,EADuD,EAEvDC,EAFuD,EAGvDC,GAHuD,EAIvD;QACA,IAAMC,KAAK,GAAGlB,CAAC,GAAGe,EAAlB;QACA,IAAMI,KAAK,GAAGlB,CAAC,GAAGe,EAAlB;;QAEA,IAAIE,KAAK,IAAI,CAAT,IAAcC,KAAK,IAAI,CAAvB,IAA4BD,KAAK,GAAGV,CAApC,IAAyCW,KAAK,GAAGR,CAArD,EAAwD;UACtD,IAAMS,MAAM,GAAGP,SAAS,CAACQ,aAAV,CAAwBH,KAAxB,EAA+BC,KAA/B,CAAf;UACA,IAAQG,IAAR,GAAiB,KAAKb,MAAtB,CAAQa,IAAR;UACA,IAAMC,GAAG,GAAG,CAACD,IAAI,CAACL,GAAG,GAAG,CAAP,CAAJ,GAAgBK,IAAI,CAACL,GAAG,GAAG,CAAP,CAApB,GAAgCK,IAAI,CAACL,GAAG,GAAG,CAAP,CAArC,IAAkD,CAA9D;UAEAJ,SAAS,CAACJ,MAAV,CAAiBa,IAAjB,CAAsBF,MAAM,GAAG,CAA/B,KAAqCG,GAAG,GAAG,GAA3C;QACD;MACF,CAfD;;MAiBA,IAAI,IAAAC,oBAAA,EAActB,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACG,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;;MAED,OAAO,IAAP;IACD;EAxCmB,CAAP;AAAA,C"}