{"version":3,"file":"index.js","names":["alphabet","maxHashLength","NaN","i","maxHash","anyBase","BIN","slice","Array","join","push","length","noop","isArrayBuffer","test","Object","prototype","toString","call","toLowerCase","indexOf","bufferFromArrayBuffer","arrayBuffer","buffer","Buffer","alloc","byteLength","view","Uint8Array","loadFromURL","options","cb","request","err","response","data","headers","url","location","isBuffer","msg","statusCode","Error","loadBufferFromPath","src","fs","readFile","match","isRawRGBAData","obj","width","height","Uint8ClampedArray","makeRGBABufferFromRGB","rgbaBuffer","allocUnsafe","j","emptyBitmap","Jimp","args","MIME_PNG","path","promisify","write","mime","getBase64","getBuffer","getBufferAsync","getPixelColor","setPixelColor","jimpInstance","finish","evData","methodName","setTimeout","emitError","emitMulti","parseInt","w","h","_background","cssColorToHex","throwError","bitmap","writeUInt32BE","parseBitmap","original","from","_quality","_deflateLevel","_deflateStrategy","_filterType","_rgba","_originalMime","imageData","isRGBA","extraConstructor","__extraConstructors","find","c","Promise","resolve","reject","run","then","bool","isNodePattern","eventName","assign","emit","getMIME","MIME","getExtension","createWriteStream","getType","pathObj","Path","parse","dir","mkdirp","sync","stream","on","end","AUTO","base","hash","pHash","ImagePHash","getHash","compareHash","currentHash","distance","x","y","edgeHandling","xi","yi","EDGE_EXTEND","Math","round","EDGE_WRAP","idx","getPixelIndex","hex","readUInt32BE","yIndex","xIndex","alpha","scanIterator","EventEmitter","addConstants","constants","entries","forEach","name","value","addJimpMethods","methods","composite","appendConstructorOption","read","image","create","rgbaToInt","r","g","b","a","pow","intToRGBA","rgba","floor","cssColor","Number","tinyColor","toHex8","limit255","n","max","min","diff","img1","img2","threshold","bmp1","bmp2","cloneQuiet","resize","numDiffPixels","pixelMatch","percent","phash","hash1","hash2","compareHashes","colorDiff","rgba1","rgba2","maxVal","jimpEvMethod","evName","method","evNameBefore","evNameAfter","replace","wrappedCb","apply","result","error","clone","jimpEvChange","f","scan","process","env","ENVIRONMENT","gl","window","self"],"sources":["../src/index.js"],"sourcesContent":["import fs from 'fs';\nimport Path from 'path';\nimport EventEmitter from 'events';\n\nimport { isNodePattern, throwError, scan, scanIterator } from '@jimp/utils';\nimport anyBase from 'any-base';\nimport mkdirp from 'mkdirp';\nimport pixelMatch from 'pixelmatch';\nimport tinyColor from 'tinycolor2';\n\nimport ImagePHash from './modules/phash';\nimport request from './request';\n\nimport composite from './composite';\nimport promisify from './utils/promisify';\nimport * as MIME from './utils/mime';\nimport { parseBitmap, getBuffer, getBufferAsync } from './utils/image-bitmap';\nimport * as constants from './constants';\n\nconst alphabet =\n  '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_';\n\n// an array storing the maximum string length of hashes at various bases\n// 0 and 1 do not exist as possible hash lengths\nconst maxHashLength = [NaN, NaN];\n\nfor (let i = 2; i < 65; i++) {\n  const maxHash = anyBase(anyBase.BIN, alphabet.slice(0, i))(\n    new Array(64 + 1).join('1')\n  );\n  maxHashLength.push(maxHash.length);\n}\n\n// no operation\nfunction noop() {}\n\n// error checking methods\n\nfunction isArrayBuffer(test) {\n  return (\n    Object.prototype.toString\n      .call(test)\n      .toLowerCase()\n      .indexOf('arraybuffer') > -1\n  );\n}\n\n// Prepare a Buffer object from the arrayBuffer. Necessary in the browser > node conversion,\n// But this function is not useful when running in node directly\nfunction bufferFromArrayBuffer(arrayBuffer) {\n  const buffer = Buffer.alloc(arrayBuffer.byteLength);\n  const view = new Uint8Array(arrayBuffer);\n\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n\n  return buffer;\n}\n\nfunction loadFromURL(options, cb) {\n  request(options, (err, response, data) => {\n    if (err) {\n      return cb(err);\n    }\n\n    if ('headers' in response && 'location' in response.headers) {\n      options.url = response.headers.location;\n      return loadFromURL(options, cb);\n    }\n\n    if (typeof data === 'object' && Buffer.isBuffer(data)) {\n      return cb(null, data);\n    }\n\n    const msg =\n      'Could not load Buffer from <' +\n      options.url +\n      '> ' +\n      '(HTTP: ' +\n      response.statusCode +\n      ')';\n\n    return new Error(msg);\n  });\n}\n\nfunction loadBufferFromPath(src, cb) {\n  if (\n    fs &&\n    typeof fs.readFile === 'function' &&\n    !src.match(/^(http|ftp)s?:\\/\\/./)\n  ) {\n    fs.readFile(src, cb);\n  } else {\n    loadFromURL({ url: src }, cb);\n  }\n}\n\nfunction isRawRGBAData(obj) {\n  return (\n    obj &&\n    typeof obj === 'object' &&\n    typeof obj.width === 'number' &&\n    typeof obj.height === 'number' &&\n    (Buffer.isBuffer(obj.data) ||\n      obj.data instanceof Uint8Array ||\n      (typeof Uint8ClampedArray === 'function' &&\n        obj.data instanceof Uint8ClampedArray)) &&\n    (obj.data.length === obj.width * obj.height * 4 ||\n      obj.data.length === obj.width * obj.height * 3)\n  );\n}\n\nfunction makeRGBABufferFromRGB(buffer) {\n  if (buffer.length % 3 !== 0) {\n    throw new Error('Buffer length is incorrect');\n  }\n\n  const rgbaBuffer = Buffer.allocUnsafe((buffer.length / 3) * 4);\n  let j = 0;\n\n  for (let i = 0; i < buffer.length; i++) {\n    rgbaBuffer[j] = buffer[i];\n\n    if ((i + 1) % 3 === 0) {\n      rgbaBuffer[++j] = 255;\n    }\n\n    j++;\n  }\n\n  return rgbaBuffer;\n}\n\nconst emptyBitmap = {\n  data: null,\n  width: null,\n  height: null\n};\n\n/**\n * Jimp constructor (from a file)\n * @param path a path to the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a url with options)\n * @param options { url, otherOptions}\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from another Jimp image or raw image data)\n * @param image a Jimp image to clone\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (from a Buffer)\n * @param data a Buffer containing the image data\n * @param {function(Error, Jimp)} cb a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\n/**\n * Jimp constructor (to generate a new image)\n * @param w the width of the image\n * @param h the height of the image\n * @param background color to fill the image with\n * @param {function(Error, Jimp)} cb (optional) a function to call when the image is parsed to a bitmap\n */\n\nclass Jimp extends EventEmitter {\n  // An object representing a bitmap in memory, comprising:\n  //  - data: a buffer of the bitmap data\n  //  - width: the width of the image in pixels\n  //  - height: the height of the image in pixels\n  bitmap = emptyBitmap;\n\n  // Default colour to use for new pixels\n  _background = 0x00000000;\n\n  // Default MIME is PNG\n  _originalMime = Jimp.MIME_PNG;\n\n  // Exif data for the image\n  _exif = null;\n\n  // Whether Transparency supporting formats will be exported as RGB or RGBA\n  _rgba = true;\n\n  constructor(...args) {\n    super();\n\n    const jimpInstance = this;\n    let cb = noop;\n\n    if (isArrayBuffer(args[0])) {\n      args[0] = bufferFromArrayBuffer(args[0]);\n    }\n\n    function finish(...args) {\n      const [err] = args;\n      const evData = err || {};\n      evData.methodName = 'constructor';\n\n      setTimeout(() => {\n        // run on next tick.\n        if (err && cb === noop) {\n          jimpInstance.emitError('constructor', err);\n        } else if (!err) {\n          jimpInstance.emitMulti('constructor', 'initialized');\n        }\n\n        cb.call(jimpInstance, ...args);\n      }, 1);\n    }\n\n    if (\n      (typeof args[0] === 'number' && typeof args[1] === 'number') ||\n      (parseInt(args[0], 10) && parseInt(args[1], 10))\n    ) {\n      // create a new image\n      const w = parseInt(args[0], 10);\n      const h = parseInt(args[1], 10);\n      cb = args[2];\n\n      // with a hex color\n      if (typeof args[2] === 'number') {\n        this._background = args[2];\n        cb = args[3];\n      }\n\n      // with a css color\n      if (typeof args[2] === 'string') {\n        this._background = Jimp.cssColorToHex(args[2]);\n        cb = args[3];\n      }\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.bitmap = {\n        data: Buffer.alloc(w * h * 4),\n        width: w,\n        height: h\n      };\n\n      for (let i = 0; i < this.bitmap.data.length; i += 4) {\n        this.bitmap.data.writeUInt32BE(this._background, i);\n      }\n\n      finish(null, this);\n    } else if (typeof args[0] === 'object' && args[0].url) {\n      cb = args[1] || noop;\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      loadFromURL(args[0], (err, data) => {\n        if (err) {\n          return throwError.call(this, err, finish);\n        }\n\n        this.parseBitmap(data, args[0].url, finish);\n      });\n    } else if (args[0] instanceof Jimp) {\n      // clone an existing Jimp\n      const [original] = args;\n      cb = args[1];\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.bitmap = {\n        data: Buffer.from(original.bitmap.data),\n        width: original.bitmap.width,\n        height: original.bitmap.height\n      };\n\n      this._quality = original._quality;\n      this._deflateLevel = original._deflateLevel;\n      this._deflateStrategy = original._deflateStrategy;\n      this._filterType = original._filterType;\n      this._rgba = original._rgba;\n      this._background = original._background;\n      this._originalMime = original._originalMime;\n\n      finish(null, this);\n    } else if (isRawRGBAData(args[0])) {\n      const [imageData] = args;\n      cb = args[1] || noop;\n\n      const isRGBA =\n        imageData.width * imageData.height * 4 === imageData.data.length;\n      const buffer = isRGBA\n        ? Buffer.from(imageData.data)\n        : makeRGBABufferFromRGB(imageData.data);\n\n      this.bitmap = {\n        data: buffer,\n        width: imageData.width,\n        height: imageData.height\n      };\n\n      finish(null, this);\n    } else if (typeof args[0] === 'string') {\n      // read from a path\n      const path = args[0];\n      cb = args[1];\n\n      if (typeof cb === 'undefined') {\n        cb = noop;\n      }\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      loadBufferFromPath(path, (err, data) => {\n        if (err) {\n          return throwError.call(this, err, finish);\n        }\n\n        this.parseBitmap(data, path, finish);\n      });\n    } else if (typeof args[0] === 'object' && Buffer.isBuffer(args[0])) {\n      // read from a buffer\n      const data = args[0];\n      cb = args[1];\n\n      if (typeof cb !== 'function') {\n        return throwError.call(this, 'cb must be a function', finish);\n      }\n\n      this.parseBitmap(data, null, finish);\n    } else {\n      // Allow client libs to add new ways to build a Jimp object.\n      // Extra constructors must be added by `Jimp.appendConstructorOption()`\n      cb = args[args.length - 1];\n\n      if (typeof cb !== 'function') {\n        // TODO: try to solve the args after cb problem.\n        cb = args[args.length - 2];\n\n        if (typeof cb !== 'function') {\n          cb = noop;\n        }\n      }\n\n      const extraConstructor = Jimp.__extraConstructors.find(c =>\n        c.test(...args)\n      );\n\n      if (extraConstructor) {\n        new Promise((resolve, reject) =>\n          extraConstructor.run.call(this, resolve, reject, ...args)\n        )\n          .then(() => finish(null, this))\n          .catch(finish);\n      } else {\n        return throwError.call(\n          this,\n          'No matching constructor overloading was found. ' +\n            'Please see the docs for how to call the Jimp constructor.',\n          finish\n        );\n      }\n    }\n  }\n\n  /**\n   * Parse a bitmap with the loaded image types.\n   *\n   * @param {Buffer} data raw image data\n   * @param {string} path optional path to file\n   * @param {function(Error, Jimp)} finish (optional) a callback for when complete\n   * @memberof Jimp\n   */\n  parseBitmap(data, path, finish) {\n    parseBitmap.call(this, data, null, finish);\n  }\n\n  /**\n   * Sets the type of the image (RGB or RGBA) when saving in a format that supports transparency (default is RGBA)\n   * @param {boolean} bool A Boolean, true to use RGBA or false to use RGB\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {Jimp} this for chaining of methods\n   */\n  rgba(bool, cb) {\n    if (typeof bool !== 'boolean') {\n      return throwError.call(\n        this,\n        'bool must be a boolean, true for RGBA or false for RGB',\n        cb\n      );\n    }\n\n    this._rgba = bool;\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n\n  /**\n   * Emit for multiple listeners\n   * @param {string} methodName name of the method to emit an error for\n   * @param {string} eventName name of the eventName to emit an error for\n   * @param {object} data to emit\n   */\n  emitMulti(methodName, eventName, data = {}) {\n    data = Object.assign(data, { methodName, eventName });\n    this.emit('any', data);\n\n    if (methodName) {\n      this.emit(methodName, data);\n    }\n\n    this.emit(eventName, data);\n  }\n\n  emitError(methodName, err) {\n    this.emitMulti(methodName, 'error', err);\n  }\n\n  /**\n   * Get the current height of the image\n   * @return {number} height of the image\n   */\n  getHeight() {\n    return this.bitmap.height;\n  }\n\n  /**\n   * Get the current width of the image\n   * @return {number} width of the image\n   */\n  getWidth() {\n    return this.bitmap.width;\n  }\n\n  /**\n   * Nicely format Jimp object when sent to the console e.g. console.log(image)\n   * @returns {string} pretty printed\n   */\n  inspect() {\n    return (\n      '<Jimp ' +\n      (this.bitmap === emptyBitmap\n        ? 'pending...'\n        : this.bitmap.width + 'x' + this.bitmap.height) +\n      '>'\n    );\n  }\n\n  /**\n   * Nicely format Jimp object when converted to a string\n   * @returns {string} pretty printed\n   */\n  toString() {\n    return '[object Jimp]';\n  }\n\n  /**\n   * Returns the original MIME of the image (default: \"image/png\")\n   * @returns {string} the MIME\n   */\n  getMIME() {\n    const mime = this._originalMime || Jimp.MIME_PNG;\n\n    return mime;\n  }\n\n  /**\n   * Returns the appropriate file extension for the original MIME of the image (default: \"png\")\n   * @returns {string} the file extension\n   */\n  getExtension() {\n    const mime = this.getMIME();\n\n    return MIME.getExtension(mime);\n  }\n\n  /**\n   * Writes the image to a file\n   * @param {string} path a path to the destination file\n   * @param {function(Error, Jimp)} cb (optional) a function to call when the image is saved to disk\n   * @returns {Jimp} this for chaining of methods\n   */\n  write(path, cb) {\n    if (!fs || !fs.createWriteStream) {\n      throw new Error(\n        'Cant access the filesystem. You can use the getBase64 method.'\n      );\n    }\n\n    if (typeof path !== 'string') {\n      return throwError.call(this, 'path must be a string', cb);\n    }\n\n    if (typeof cb === 'undefined') {\n      cb = noop;\n    }\n\n    if (typeof cb !== 'function') {\n      return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    const mime = MIME.getType(path) || this.getMIME();\n    const pathObj = Path.parse(path);\n\n    if (pathObj.dir) {\n      mkdirp.sync(pathObj.dir);\n    }\n\n    this.getBuffer(mime, (err, buffer) => {\n      if (err) {\n        return throwError.call(this, err, cb);\n      }\n\n      const stream = fs.createWriteStream(path);\n\n      stream\n        .on('open', () => {\n          stream.write(buffer);\n          stream.end();\n        })\n        .on('error', err => {\n          return throwError.call(this, err, cb);\n        });\n      stream.on('finish', () => {\n        cb.call(this, null, this);\n      });\n    });\n\n    return this;\n  }\n\n  writeAsync = path => promisify(this.write, this, path);\n\n  /**\n   * Converts the image to a base 64 string\n   * @param {string} mime the mime type of the image data to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n  getBase64(mime, cb) {\n    if (mime === Jimp.AUTO) {\n      // allow auto MIME detection\n      mime = this.getMIME();\n    }\n\n    if (typeof mime !== 'string') {\n      return throwError.call(this, 'mime must be a string', cb);\n    }\n\n    if (typeof cb !== 'function') {\n      return throwError.call(this, 'cb must be a function', cb);\n    }\n\n    this.getBuffer(mime, function(err, data) {\n      if (err) {\n        return throwError.call(this, err, cb);\n      }\n\n      const src = 'data:' + mime + ';base64,' + data.toString('base64');\n      cb.call(this, null, src);\n    });\n\n    return this;\n  }\n\n  getBase64Async = mime => promisify(this.getBase64, this, mime);\n\n  /**\n   * Generates a perceptual hash of the image <https://en.wikipedia.org/wiki/Perceptual_hashing>. And pads the string. Can configure base.\n   * @param {number} base (optional) a number between 2 and 64 representing the base for the hash (e.g. 2 is binary, 10 is decimal, 16 is hex, 64 is base 64). Defaults to 64.\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {string} a string representing the hash\n   */\n  hash(base, cb) {\n    base = base || 64;\n\n    if (typeof base === 'function') {\n      cb = base;\n      base = 64;\n    }\n\n    if (typeof base !== 'number') {\n      return throwError.call(this, 'base must be a number', cb);\n    }\n\n    if (base < 2 || base > 64) {\n      return throwError.call(\n        this,\n        'base must be a number between 2 and 64',\n        cb\n      );\n    }\n\n    let hash = this.pHash();\n    hash = anyBase(anyBase.BIN, alphabet.slice(0, base))(hash);\n\n    while (hash.length < maxHashLength[base]) {\n      hash = '0' + hash; // pad out with leading zeros\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, hash);\n    }\n\n    return hash;\n  }\n\n  /**\n   * Calculates the perceptual hash\n   * @returns {number} the perceptual hash\n   */\n  pHash() {\n    const pHash = new ImagePHash();\n    return pHash.getHash(this);\n  }\n\n  /**\n   * Calculates the hamming distance of the current image and a hash based on their perceptual hash\n   * @param {hash} compareHash hash to compare to\n   * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n   */\n  distanceFromHash(compareHash) {\n    const pHash = new ImagePHash();\n    const currentHash = pHash.getHash(this);\n\n    return pHash.distance(currentHash, compareHash);\n  }\n\n  /**\n   * Converts the image to a buffer\n   * @param {string} mime the mime type of the image buffer to be created\n   * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n   * @returns {Jimp} this for chaining of methods\n   */\n  getBuffer = getBuffer;\n\n  getBufferAsync = getBufferAsync;\n\n  /**\n   * Returns the offset of a pixel in the bitmap buffer\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {string} edgeHandling (optional) define how to sum pixels from outside the border\n   * @param {number} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  getPixelIndex(x, y, edgeHandling, cb) {\n    let xi;\n    let yi;\n\n    if (typeof edgeHandling === 'function' && typeof cb === 'undefined') {\n      cb = edgeHandling;\n      edgeHandling = null;\n    }\n\n    if (!edgeHandling) {\n      edgeHandling = Jimp.EDGE_EXTEND;\n    }\n\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers', cb);\n    }\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n    xi = x;\n    yi = y;\n\n    if (edgeHandling === Jimp.EDGE_EXTEND) {\n      if (x < 0) xi = 0;\n      if (x >= this.bitmap.width) xi = this.bitmap.width - 1;\n      if (y < 0) yi = 0;\n      if (y >= this.bitmap.height) yi = this.bitmap.height - 1;\n    }\n\n    if (edgeHandling === Jimp.EDGE_WRAP) {\n      if (x < 0) {\n        xi = this.bitmap.width + x;\n      }\n\n      if (x >= this.bitmap.width) {\n        xi = x % this.bitmap.width;\n      }\n\n      if (y < 0) {\n        xi = this.bitmap.height + y;\n      }\n\n      if (y >= this.bitmap.height) {\n        yi = y % this.bitmap.height;\n      }\n    }\n\n    let i = (this.bitmap.width * yi + xi) << 2;\n\n    // if out of bounds index is -1\n    if (xi < 0 || xi >= this.bitmap.width) {\n      i = -1;\n    }\n\n    if (yi < 0 || yi >= this.bitmap.height) {\n      i = -1;\n    }\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, i);\n    }\n\n    return i;\n  }\n\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the color of the pixel\n   */\n  getPixelColor(x, y, cb) {\n    if (typeof x !== 'number' || typeof y !== 'number')\n      return throwError.call(this, 'x and y must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const idx = this.getPixelIndex(x, y);\n    const hex = this.bitmap.data.readUInt32BE(idx);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, hex);\n    }\n\n    return hex;\n  }\n\n  getPixelColour = this.getPixelColor;\n\n  /**\n   * Returns the hex colour value of a pixel\n   * @param {number} hex color to set\n   * @param {number} x the x coordinate\n   * @param {number} y the y coordinate\n   * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n   * @returns {number} the index of the pixel or -1 if not found\n   */\n  setPixelColor(hex, x, y, cb) {\n    if (\n      typeof hex !== 'number' ||\n      typeof x !== 'number' ||\n      typeof y !== 'number'\n    )\n      return throwError.call(this, 'hex, x and y must be numbers', cb);\n\n    // round input\n    x = Math.round(x);\n    y = Math.round(y);\n\n    const idx = this.getPixelIndex(x, y);\n    this.bitmap.data.writeUInt32BE(hex, idx);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n\n  setPixelColour = this.setPixelColor;\n\n  /**\n   * Determine if the image contains opaque pixels.\n   * @return {boolean} hasAlpha whether the image contains opaque pixels\n   */\n  hasAlpha() {\n    for (let yIndex = 0; yIndex < this.bitmap.height; yIndex++) {\n      for (let xIndex = 0; xIndex < this.bitmap.width; xIndex++) {\n        const idx = (this.bitmap.width * yIndex + xIndex) << 2;\n        const alpha = this.bitmap.data[idx + 3];\n\n        if (alpha !== 0xff) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Iterate scan through a region of the bitmap\n   * @param {number} x the x coordinate to begin the scan at\n   * @param {number} y the y coordinate to begin the scan at\n   * @param w the width of the scan region\n   * @param h the height of the scan region\n   * @returns {IterableIterator<{x: number, y: number, idx: number, image: Jimp}>}\n   */\n  scanIterator(x, y, w, h) {\n    if (typeof x !== 'number' || typeof y !== 'number') {\n      return throwError.call(this, 'x and y must be numbers');\n    }\n\n    if (typeof w !== 'number' || typeof h !== 'number') {\n      return throwError.call(this, 'w and h must be numbers');\n    }\n\n    return scanIterator(this, x, y, w, h);\n  }\n}\n\nexport function addConstants(constants, jimpInstance = Jimp) {\n  Object.entries(constants).forEach(([name, value]) => {\n    jimpInstance[name] = value;\n  });\n}\n\nexport function addJimpMethods(methods, jimpInstance = Jimp) {\n  Object.entries(methods).forEach(([name, value]) => {\n    jimpInstance.prototype[name] = value;\n  });\n}\n\naddConstants(constants);\naddJimpMethods({ composite });\n\nJimp.__extraConstructors = [];\n\n/**\n * Allow client libs to add new ways to build a Jimp object.\n * @param {string} name identify the extra constructor.\n * @param {function} test a function that returns true when it accepts the arguments passed to the main constructor.\n * @param {function} run where the magic happens.\n */\nJimp.appendConstructorOption = function(name, test, run) {\n  Jimp.__extraConstructors.push({ name, test, run });\n};\n\n/**\n * Read an image from a file or a Buffer. Takes the same args as the constructor\n * @returns {Promise} a promise\n */\nJimp.read = function(...args) {\n  return new Promise((resolve, reject) => {\n    new Jimp(...args, (err, image) => {\n      if (err) reject(err);\n      else resolve(image);\n    });\n  });\n};\n\nJimp.create = Jimp.read;\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} r the red value (0-255)\n * @param {number} g the green value (0-255)\n * @param {number} b the blue value (0-255)\n * @param {number} a the alpha value (0-255)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {number} an single integer colour value\n */\nJimp.rgbaToInt = function(r, g, b, a, cb) {\n  if (\n    typeof r !== 'number' ||\n    typeof g !== 'number' ||\n    typeof b !== 'number' ||\n    typeof a !== 'number'\n  ) {\n    return throwError.call(this, 'r, g, b and a must be numbers', cb);\n  }\n\n  if (r < 0 || r > 255) {\n    return throwError.call(this, 'r must be between 0 and 255', cb);\n  }\n\n  if (g < 0 || g > 255) {\n    throwError.call(this, 'g must be between 0 and 255', cb);\n  }\n\n  if (b < 0 || b > 255) {\n    return throwError.call(this, 'b must be between 0 and 255', cb);\n  }\n\n  if (a < 0 || a > 255) {\n    return throwError.call(this, 'a must be between 0 and 255', cb);\n  }\n\n  r = Math.round(r);\n  b = Math.round(b);\n  g = Math.round(g);\n  a = Math.round(a);\n\n  const i =\n    r * Math.pow(256, 3) +\n    g * Math.pow(256, 2) +\n    b * Math.pow(256, 1) +\n    a * Math.pow(256, 0);\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, i);\n  }\n\n  return i;\n};\n\n/**\n * A static helper method that converts RGBA values to a single integer value\n * @param {number} i a single integer value representing an RGBA colour (e.g. 0xFF0000FF for red)\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns {object} an object with the properties r, g, b and a representing RGBA values\n */\nJimp.intToRGBA = function(i, cb) {\n  if (typeof i !== 'number') {\n    return throwError.call(this, 'i must be a number', cb);\n  }\n\n  const rgba = {};\n\n  rgba.r = Math.floor(i / Math.pow(256, 3));\n  rgba.g = Math.floor((i - rgba.r * Math.pow(256, 3)) / Math.pow(256, 2));\n  rgba.b = Math.floor(\n    (i - rgba.r * Math.pow(256, 3) - rgba.g * Math.pow(256, 2)) /\n      Math.pow(256, 1)\n  );\n  rgba.a = Math.floor(\n    (i -\n      rgba.r * Math.pow(256, 3) -\n      rgba.g * Math.pow(256, 2) -\n      rgba.b * Math.pow(256, 1)) /\n      Math.pow(256, 0)\n  );\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, rgba);\n  }\n\n  return rgba;\n};\n\n/**\n * Converts a css color (Hex, 8-digit (RGBA) Hex, RGB, RGBA, HSL, HSLA, HSV, HSVA, Named) to a hex number\n * @param {string} cssColor a number\n * @returns {number} a hex number representing a color\n */\nJimp.cssColorToHex = function(cssColor) {\n  cssColor = cssColor || 0; // 0, null, undefined, NaN\n\n  if (typeof cssColor === 'number') return Number(cssColor);\n\n  return parseInt(tinyColor(cssColor).toHex8(), 16);\n};\n\n/**\n * Limits a number to between 0 or 255\n * @param {number} n a number\n * @returns {number} the number limited to between 0 or 255\n */\nJimp.limit255 = function(n) {\n  n = Math.max(n, 0);\n  n = Math.min(n, 255);\n\n  return n;\n};\n\n/**\n * Diffs two images and returns\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @param {number} threshold (optional) a number, 0 to 1, the smaller the value the more sensitive the comparison (default: 0.1)\n * @returns {object} an object { percent: percent similar, diff: a Jimp image highlighting differences }\n */\nJimp.diff = function(img1, img2, threshold = 0.1) {\n  if (!(img1 instanceof Jimp) || !(img2 instanceof Jimp))\n    return throwError.call(this, 'img1 and img2 must be an Jimp images');\n\n  const bmp1 = img1.bitmap;\n  const bmp2 = img2.bitmap;\n\n  if (bmp1.width !== bmp2.width || bmp1.height !== bmp2.height) {\n    if (bmp1.width * bmp1.height > bmp2.width * bmp2.height) {\n      // img1 is bigger\n      img1 = img1.cloneQuiet().resize(bmp2.width, bmp2.height);\n    } else {\n      // img2 is bigger (or they are the same in area)\n      img2 = img2.cloneQuiet().resize(bmp1.width, bmp1.height);\n    }\n  }\n\n  if (typeof threshold !== 'number' || threshold < 0 || threshold > 1) {\n    return throwError.call(this, 'threshold must be a number between 0 and 1');\n  }\n\n  const diff = new Jimp(bmp1.width, bmp1.height, 0xffffffff);\n\n  const numDiffPixels = pixelMatch(\n    bmp1.data,\n    bmp2.data,\n    diff.bitmap.data,\n    diff.bitmap.width,\n    diff.bitmap.height,\n    { threshold }\n  );\n\n  return {\n    percent: numDiffPixels / (diff.bitmap.width * diff.bitmap.height),\n    image: diff\n  };\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {Jimp} img1 a Jimp image to compare\n * @param {Jimp} img2 a Jimp image to compare\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.distance = function(img1, img2) {\n  const phash = new ImagePHash();\n  const hash1 = phash.getHash(img1);\n  const hash2 = phash.getHash(img2);\n\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Calculates the hamming distance of two images based on their perceptual hash\n * @param {hash} hash1 a pHash\n * @param {hash} hash2 a pHash\n * @returns {number} a number ranging from 0 to 1, 0 means they are believed to be identical\n */\nJimp.compareHashes = function(hash1, hash2) {\n  const phash = new ImagePHash();\n\n  return phash.distance(hash1, hash2);\n};\n\n/**\n * Compute color difference\n * 0 means no difference, 1 means maximum difference.\n * @param {number} rgba1:    first color to compare.\n * @param {number} rgba2:    second color to compare.\n * Both parameters must be an color object {r:val, g:val, b:val, a:val}\n * Where `a` is optional and `val` is an integer between 0 and 255.\n * @returns {number} float between 0 and 1.\n */\nJimp.colorDiff = function(rgba1, rgba2) {\n  const pow = n => Math.pow(n, 2);\n  const { max } = Math;\n  const maxVal = 255 * 255 * 3;\n\n  if (rgba1.a !== 0 && !rgba1.a) {\n    rgba1.a = 255;\n  }\n\n  if (rgba2.a !== 0 && !rgba2.a) {\n    rgba2.a = 255;\n  }\n\n  return (\n    (max(pow(rgba1.r - rgba2.r), pow(rgba1.r - rgba2.r - rgba1.a + rgba2.a)) +\n      max(pow(rgba1.g - rgba2.g), pow(rgba1.g - rgba2.g - rgba1.a + rgba2.a)) +\n      max(pow(rgba1.b - rgba2.b), pow(rgba1.b - rgba2.b - rgba1.a + rgba2.a))) /\n    maxVal\n  );\n};\n\n/**\n * Helper to create Jimp methods that emit events before and after its execution.\n * @param {string} methodName   The name to be appended to Jimp prototype.\n * @param {string} evName       The event name to be called.\n *                     It will be prefixed by `before-` and emitted when on method call.\n *                     It will be appended by `ed` and emitted after the method run.\n * @param {function} method       A function implementing the method itself.\n * It will also create a quiet version that will not emit events, to not\n * mess the user code with many `changed` event calls. You can call with\n * `methodName + \"Quiet\"`.\n *\n * The emitted event comes with a object parameter to the listener with the\n * `methodName` as one attribute.\n */\nexport function jimpEvMethod(methodName, evName, method) {\n  const evNameBefore = 'before-' + evName;\n  const evNameAfter = evName.replace(/e$/, '') + 'ed';\n\n  Jimp.prototype[methodName] = function(...args) {\n    let wrappedCb;\n    const cb = args[method.length - 1];\n    const jimpInstance = this;\n\n    if (typeof cb === 'function') {\n      wrappedCb = function(...args) {\n        const [err, data] = args;\n\n        if (err) {\n          jimpInstance.emitError(methodName, err);\n        } else {\n          jimpInstance.emitMulti(methodName, evNameAfter, {\n            [methodName]: data\n          });\n        }\n\n        cb.apply(this, args);\n      };\n\n      args[args.length - 1] = wrappedCb;\n    } else {\n      wrappedCb = false;\n    }\n\n    this.emitMulti(methodName, evNameBefore);\n\n    let result;\n\n    try {\n      result = method.apply(this, args);\n\n      if (!wrappedCb) {\n        this.emitMulti(methodName, evNameAfter, {\n          [methodName]: result\n        });\n      }\n    } catch (error) {\n      error.methodName = methodName;\n      this.emitError(methodName, error);\n    }\n\n    return result;\n  };\n\n  Jimp.prototype[methodName + 'Quiet'] = method;\n}\n\n/**\n * Creates a new image that is a clone of this one.\n * @param {function(Error, Jimp)} cb (optional) A callback for when complete\n * @returns the new image\n */\njimpEvMethod('clone', 'clone', function(cb) {\n  const clone = new Jimp(this);\n\n  if (isNodePattern(cb)) {\n    cb.call(clone, null, clone);\n  }\n\n  return clone;\n});\n\n/**\n * Simplify jimpEvMethod call for the common `change` evName.\n * @param {string} methodName name of the method\n * @param {function} method to watch changes for\n */\nexport function jimpEvChange(methodName, method) {\n  jimpEvMethod(methodName, 'change', method);\n}\n\n/**\n * Sets the type of the image (RGB or RGBA) when saving as PNG format (default is RGBA)\n * @param b A Boolean, true to use RGBA or false to use RGB\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('background', function(hex, cb) {\n  if (typeof hex !== 'number') {\n    return throwError.call(this, 'hex must be a hexadecimal rgba value', cb);\n  }\n\n  this._background = hex;\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, this);\n  }\n\n  return this;\n});\n\n/**\n * Scans through a region of the bitmap, calling a function for each pixel.\n * @param {number} x the x coordinate to begin the scan at\n * @param {number} y the y coordinate to begin the scan at\n * @param w the width of the scan region\n * @param h the height of the scan region\n * @param f a function to call on even pixel; the (x, y) position of the pixel\n * and the index of the pixel in the bitmap buffer are passed to the function\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\njimpEvChange('scan', function(x, y, w, h, f, cb) {\n  if (typeof x !== 'number' || typeof y !== 'number') {\n    return throwError.call(this, 'x and y must be numbers', cb);\n  }\n\n  if (typeof w !== 'number' || typeof h !== 'number') {\n    return throwError.call(this, 'w and h must be numbers', cb);\n  }\n\n  if (typeof f !== 'function') {\n    return throwError.call(this, 'f must be a function', cb);\n  }\n\n  const result = scan(this, x, y, w, h, f);\n\n  if (isNodePattern(cb)) {\n    cb.call(this, null, result);\n  }\n\n  return result;\n});\n\nif (process.env.ENVIRONMENT === 'BROWSER') {\n  // For use in a web browser or web worker\n  /* global self */\n  let gl;\n\n  if (typeof window !== 'undefined' && typeof window === 'object') {\n    gl = window;\n  }\n\n  if (typeof self !== 'undefined' && typeof self === 'object') {\n    gl = self;\n  }\n\n  gl.Jimp = Jimp;\n  gl.Buffer = Buffer;\n}\n\nexport { addType } from './utils/mime';\n\nexport default Jimp;\n"],"mappings":"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"}