{"version":3,"file":"index.js","names":["configure","configuration","jimpInstance","Jimp","jimpConfig","hasAlpha","encoders","decoders","constants","addToConfig","newConfig","Object","entries","forEach","key","value","addImageType","typeModule","type","Array","isArray","mime","addType","mimeType","addPlugin","pluginModule","plugin","jimpEvChange","types","plugins","addJimpMethods","addConstants"],"sources":["../src/index.js"],"sourcesContent":["import Jimp, {\n  addType,\n  addJimpMethods,\n  addConstants,\n  jimpEvChange\n} from '@jimp/core';\n\nexport default function configure(configuration, jimpInstance = Jimp) {\n  const jimpConfig = {\n    hasAlpha: {},\n    encoders: {},\n    decoders: {},\n    class: {},\n    constants: {}\n  };\n\n  function addToConfig(newConfig) {\n    Object.entries(newConfig).forEach(([key, value]) => {\n      jimpConfig[key] = {\n        ...jimpConfig[key],\n        ...value\n      };\n    });\n  }\n\n  function addImageType(typeModule) {\n    const type = typeModule();\n\n    if (Array.isArray(type.mime)) {\n      addType(...type.mime);\n    } else {\n      Object.entries(type.mime).forEach(mimeType => addType(...mimeType));\n    }\n\n    delete type.mime;\n    addToConfig(type);\n  }\n\n  function addPlugin(pluginModule) {\n    const plugin = pluginModule(jimpEvChange) || {};\n    if (!plugin.class && !plugin.constants) {\n      // Default to class function\n      addToConfig({ class: plugin });\n    } else {\n      addToConfig(plugin);\n    }\n  }\n\n  if (configuration.types) {\n    configuration.types.forEach(addImageType);\n\n    jimpInstance.decoders = {\n      ...jimpInstance.decoders,\n      ...jimpConfig.decoders\n    };\n    jimpInstance.encoders = {\n      ...jimpInstance.encoders,\n      ...jimpConfig.encoders\n    };\n    jimpInstance.hasAlpha = {\n      ...jimpInstance.hasAlpha,\n      ...jimpConfig.hasAlpha\n    };\n  }\n\n  if (configuration.plugins) {\n    configuration.plugins.forEach(addPlugin);\n  }\n\n  addJimpMethods(jimpConfig.class, jimpInstance);\n  addConstants(jimpConfig.constants, jimpInstance);\n\n  return Jimp;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;AAOe,SAASA,SAAT,CAAmBC,aAAnB,EAAuD;EAAA,IAArBC,YAAqB,uEAANC,gBAAM;EACpE,IAAMC,UAAU,GAAG;IACjBC,QAAQ,EAAE,EADO;IAEjBC,QAAQ,EAAE,EAFO;IAGjBC,QAAQ,EAAE,EAHO;IAIjB,SAAO,EAJU;IAKjBC,SAAS,EAAE;EALM,CAAnB;;EAQA,SAASC,WAAT,CAAqBC,SAArB,EAAgC;IAC9BC,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,OAA1B,CAAkC,gBAAkB;MAAA;MAAA,IAAhBC,GAAgB;MAAA,IAAXC,KAAW;;MAClDX,UAAU,CAACU,GAAD,CAAV,mCACKV,UAAU,CAACU,GAAD,CADf,GAEKC,KAFL;IAID,CALD;EAMD;;EAED,SAASC,YAAT,CAAsBC,UAAtB,EAAkC;IAChC,IAAMC,IAAI,GAAGD,UAAU,EAAvB;;IAEA,IAAIE,KAAK,CAACC,OAAN,CAAcF,IAAI,CAACG,IAAnB,CAAJ,EAA8B;MAC5BC,aAAA,mDAAWJ,IAAI,CAACG,IAAhB;IACD,CAFD,MAEO;MACLV,MAAM,CAACC,OAAP,CAAeM,IAAI,CAACG,IAApB,EAA0BR,OAA1B,CAAkC,UAAAU,QAAQ;QAAA,OAAID,aAAA,mDAAWC,QAAX,EAAJ;MAAA,CAA1C;IACD;;IAED,OAAOL,IAAI,CAACG,IAAZ;IACAZ,WAAW,CAACS,IAAD,CAAX;EACD;;EAED,SAASM,SAAT,CAAmBC,YAAnB,EAAiC;IAC/B,IAAMC,MAAM,GAAGD,YAAY,CAACE,kBAAD,CAAZ,IAA8B,EAA7C;;IACA,IAAI,CAACD,MAAM,SAAP,IAAiB,CAACA,MAAM,CAAClB,SAA7B,EAAwC;MACtC;MACAC,WAAW,CAAC;QAAE,SAAOiB;MAAT,CAAD,CAAX;IACD,CAHD,MAGO;MACLjB,WAAW,CAACiB,MAAD,CAAX;IACD;EACF;;EAED,IAAIzB,aAAa,CAAC2B,KAAlB,EAAyB;IACvB3B,aAAa,CAAC2B,KAAd,CAAoBf,OAApB,CAA4BG,YAA5B;IAEAd,YAAY,CAACK,QAAb,mCACKL,YAAY,CAACK,QADlB,GAEKH,UAAU,CAACG,QAFhB;IAIAL,YAAY,CAACI,QAAb,mCACKJ,YAAY,CAACI,QADlB,GAEKF,UAAU,CAACE,QAFhB;IAIAJ,YAAY,CAACG,QAAb,mCACKH,YAAY,CAACG,QADlB,GAEKD,UAAU,CAACC,QAFhB;EAID;;EAED,IAAIJ,aAAa,CAAC4B,OAAlB,EAA2B;IACzB5B,aAAa,CAAC4B,OAAd,CAAsBhB,OAAtB,CAA8BW,SAA9B;EACD;;EAED,IAAAM,oBAAA,EAAe1B,UAAU,SAAzB,EAAiCF,YAAjC;EACA,IAAA6B,kBAAA,EAAa3B,UAAU,CAACI,SAAxB,EAAmCN,YAAnC;EAEA,OAAOC,gBAAP;AACD"}