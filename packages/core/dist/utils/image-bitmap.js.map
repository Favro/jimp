{"version":3,"file":"image-bitmap.js","names":["fileTypeFromBuffer","buf","_cached","eval","getMIMEFromBuffer","buffer","path","fileType","mime","MIME","getType","getExifOrientation","img","_exif","tags","Orientation","getExifOrientationTransformation","w","getWidth","h","getHeight","x","y","transformBitmap","width","height","transformation","_data","bitmap","data","_width","Buffer","alloc","length","_x","_y","idx","_idx","pixel","readUInt32BE","writeUInt32BE","exifRotate","swapDimensions","newWidth","newHeight","parseBitmap","cb","then","Error","_originalMime","toLowerCase","getMIME","constructor","decoders","throwError","call","error","EXIFParser","create","parse","message","compositeBitmapOverBackground","Jimp","image","_background","composite","getBuffer","constants","AUTO","_rgba","hasAlpha","from","encoders","getBufferAsync","promisify"],"sources":["../../src/utils/image-bitmap.js"],"sourcesContent":["import EXIFParser from 'exif-parser';\nimport { throwError } from '@jimp/utils';\n\nimport * as constants from '../constants';\nimport * as MIME from './mime';\nimport promisify from './promisify';\n\nconst fileTypeFromBuffer = async buf => {\n  fileTypeFromBuffer._cached =\n    fileTypeFromBuffer._cached ||\n    (await eval(\"import('file-type')\")).fileTypeFromBuffer;\n  return fileTypeFromBuffer._cached(buf);\n};\n\nasync function getMIMEFromBuffer(buffer, path) {\n  const fileType = await fileTypeFromBuffer(buffer);\n\n  if (fileType) {\n    // If fileType returns something for buffer, then return the mime given\n    return fileType.mime;\n  }\n\n  if (path) {\n    // If a path is supplied, and fileType yields no results, then retry with MIME\n    // Path can be either a file path or a url\n    return MIME.getType(path);\n  }\n\n  return null;\n}\n\n/*\n * Obtains image orientation from EXIF metadata.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {number} a number 1-8 representing EXIF orientation,\n *          in particular 1 if orientation tag is missing\n */\nfunction getExifOrientation(img) {\n  return (img._exif && img._exif.tags && img._exif.tags.Orientation) || 1;\n}\n\n/**\n * Returns a function which translates EXIF-rotated coordinates into\n * non-rotated ones.\n *\n * Transformation reference: http://sylvana.net/jpegcrop/exif_orientation.html.\n *\n * @param img {Jimp} a Jimp image object\n * @returns {function} transformation function for transformBitmap().\n */\nfunction getExifOrientationTransformation(img) {\n  const w = img.getWidth();\n  const h = img.getHeight();\n\n  switch (getExifOrientation(img)) {\n    case 1: // Horizontal (normal)\n      // does not need to be supported here\n      return null;\n\n    case 2: // Mirror horizontal\n      return function(x, y) {\n        return [w - x - 1, y];\n      };\n\n    case 3: // Rotate 180\n      return function(x, y) {\n        return [w - x - 1, h - y - 1];\n      };\n\n    case 4: // Mirror vertical\n      return function(x, y) {\n        return [x, h - y - 1];\n      };\n\n    case 5: // Mirror horizontal and rotate 270 CW\n      return function(x, y) {\n        return [y, x];\n      };\n\n    case 6: // Rotate 90 CW\n      return function(x, y) {\n        return [y, h - x - 1];\n      };\n\n    case 7: // Mirror horizontal and rotate 90 CW\n      return function(x, y) {\n        return [w - y - 1, h - x - 1];\n      };\n\n    case 8: // Rotate 270 CW\n      return function(x, y) {\n        return [w - y - 1, x];\n      };\n\n    default:\n      return null;\n  }\n}\n\n/*\n * Transforms bitmap in place (moves pixels around) according to given\n * transformation function.\n *\n * @param img {Jimp} a Jimp image object, which bitmap is supposed to\n *        be transformed\n * @param width {number} bitmap width after the transformation\n * @param height {number} bitmap height after the transformation\n * @param transformation {function} transformation function which defines pixel\n *        mapping between new and source bitmap. It takes a pair of coordinates\n *        in the target, and returns a respective pair of coordinates in\n *        the source bitmap, i.e. has following form:\n *        `function(new_x, new_y) { return [src_x, src_y] }`.\n */\nfunction transformBitmap(img, width, height, transformation) {\n  // Underscore-prefixed values are related to the source bitmap\n  // Their counterparts with no prefix are related to the target bitmap\n  const _data = img.bitmap.data;\n  const _width = img.bitmap.width;\n\n  const data = Buffer.alloc(_data.length);\n\n  for (let x = 0; x < width; x++) {\n    for (let y = 0; y < height; y++) {\n      const [_x, _y] = transformation(x, y);\n\n      const idx = (width * y + x) << 2;\n      const _idx = (_width * _y + _x) << 2;\n\n      const pixel = _data.readUInt32BE(_idx);\n      data.writeUInt32BE(pixel, idx);\n    }\n  }\n\n  img.bitmap.data = data;\n  img.bitmap.width = width;\n  img.bitmap.height = height;\n}\n\n/*\n * Automagically rotates an image based on its EXIF data (if present).\n * @param img {Jimp} a Jimp image object\n */\nfunction exifRotate(img) {\n  if (getExifOrientation(img) < 2) return;\n\n  const transformation = getExifOrientationTransformation(img);\n  const swapDimensions = getExifOrientation(img) > 4;\n\n  const newWidth = swapDimensions ? img.bitmap.height : img.bitmap.width;\n  const newHeight = swapDimensions ? img.bitmap.width : img.bitmap.height;\n\n  transformBitmap(img, newWidth, newHeight, transformation);\n}\n\n// parses a bitmap from the constructor to the JIMP bitmap property\nexport function parseBitmap(data, path, cb) {\n  getMIMEFromBuffer(data, path).then(\n    mime => {\n      if (typeof mime !== 'string') {\n        return cb(new Error('Could not find MIME for Buffer <' + path + '>'));\n      }\n\n      this._originalMime = mime.toLowerCase();\n\n      try {\n        const mime = this.getMIME();\n\n        if (this.constructor.decoders[mime]) {\n          this.bitmap = this.constructor.decoders[mime](data);\n        } else {\n          return throwError.call(this, 'Unsupported MIME type: ' + mime, cb);\n        }\n      } catch (error) {\n        return cb.call(this, error, this);\n      }\n\n      try {\n        this._exif = EXIFParser.create(data).parse();\n        exifRotate(this); // EXIF data\n      } catch (error) {\n        /* meh */\n      }\n\n      cb.call(this, null, this);\n\n      return this;\n    },\n    error => {\n      cb(\n        new Error(\n          'Could not find MIME for Buffer <' + path + '> ' + error.message\n        )\n      );\n    }\n  );\n}\n\nfunction compositeBitmapOverBackground(Jimp, image) {\n  return new Jimp(\n    image.bitmap.width,\n    image.bitmap.height,\n    image._background\n  ).composite(image, 0, 0).bitmap;\n}\n\n/**\n * Converts the image to a buffer\n * @param {string} mime the mime type of the image buffer to be created\n * @param {function(Error, Jimp)} cb a Node-style function to call with the buffer as the second argument\n * @returns {Jimp} this for chaining of methods\n */\nexport function getBuffer(mime, cb) {\n  if (mime === constants.AUTO) {\n    // allow auto MIME detection\n    mime = this.getMIME();\n  }\n\n  if (typeof mime !== 'string') {\n    return throwError.call(this, 'mime must be a string', cb);\n  }\n\n  if (typeof cb !== 'function') {\n    return throwError.call(this, 'cb must be a function', cb);\n  }\n\n  mime = mime.toLowerCase();\n\n  if (this._rgba && this.constructor.hasAlpha[mime]) {\n    this.bitmap.data = Buffer.from(this.bitmap.data);\n  } else {\n    // when format doesn't support alpha\n    // composite onto a new image so that the background shows through alpha channels\n    this.bitmap.data = compositeBitmapOverBackground(\n      this.constructor,\n      this\n    ).data;\n  }\n\n  if (this.constructor.encoders[mime]) {\n    const buffer = this.constructor.encoders[mime](this);\n    cb.call(this, null, buffer);\n  } else {\n    cb.call(this, 'Unsupported MIME type: ' + mime);\n  }\n\n  return this;\n}\n\nexport function getBufferAsync(mime) {\n  return promisify(getBuffer, this, mime);\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AACA;;;;;;AAEA,IAAMA,kBAAkB;EAAA,yFAAG,iBAAMC,GAAN;IAAA;MAAA;QAAA;UAAA;YAAA,cAEvBD,kBAAkB,CAACE,OAFI;;YAAA;cAAA;cAAA;YAAA;;YAAA;YAAA,OAGhBC,IAAI,CAAC,qBAAD,CAHY;;UAAA;YAAA,4BAGaH,kBAHb;;UAAA;YACzBA,kBAAkB,CAACE,OADM;YAAA,iCAIlBF,kBAAkB,CAACE,OAAnB,CAA2BD,GAA3B,CAJkB;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAH;;EAAA,gBAAlBD,kBAAkB;IAAA;EAAA;AAAA,GAAxB;;SAOeI,iB;;;AAiBf;AACA;AACA;AACA;AACA;AACA;AACA;;;;qGAvBA,kBAAiCC,MAAjC,EAAyCC,IAAzC;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAAA,OACyBN,kBAAkB,CAACK,MAAD,CAD3C;;UAAA;YACQE,QADR;;YAAA,KAGMA,QAHN;cAAA;cAAA;YAAA;;YAAA,kCAKWA,QAAQ,CAACC,IALpB;;UAAA;YAAA,KAQMF,IARN;cAAA;cAAA;YAAA;;YAAA,kCAWWG,IAAI,CAACC,OAAL,CAAaJ,IAAb,CAXX;;UAAA;YAAA,kCAcS,IAdT;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,C;;;;AAwBA,SAASK,kBAAT,CAA4BC,GAA5B,EAAiC;EAC/B,OAAQA,GAAG,CAACC,KAAJ,IAAaD,GAAG,CAACC,KAAJ,CAAUC,IAAvB,IAA+BF,GAAG,CAACC,KAAJ,CAAUC,IAAV,CAAeC,WAA/C,IAA+D,CAAtE;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gCAAT,CAA0CJ,GAA1C,EAA+C;EAC7C,IAAMK,CAAC,GAAGL,GAAG,CAACM,QAAJ,EAAV;EACA,IAAMC,CAAC,GAAGP,GAAG,CAACQ,SAAJ,EAAV;;EAEA,QAAQT,kBAAkB,CAACC,GAAD,CAA1B;IACE,KAAK,CAAL;MAAQ;MACN;MACA,OAAO,IAAP;;IAEF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASS,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACL,CAAC,GAAGI,CAAJ,GAAQ,CAAT,EAAYC,CAAZ,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASD,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACL,CAAC,GAAGI,CAAJ,GAAQ,CAAT,EAAYF,CAAC,GAAGG,CAAJ,GAAQ,CAApB,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASD,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACD,CAAD,EAAIF,CAAC,GAAGG,CAAJ,GAAQ,CAAZ,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASD,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACA,CAAD,EAAID,CAAJ,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASA,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACA,CAAD,EAAIH,CAAC,GAAGE,CAAJ,GAAQ,CAAZ,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASA,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACL,CAAC,GAAGK,CAAJ,GAAQ,CAAT,EAAYH,CAAC,GAAGE,CAAJ,GAAQ,CAApB,CAAP;MACD,CAFD;;IAIF,KAAK,CAAL;MAAQ;MACN,OAAO,UAASA,CAAT,EAAYC,CAAZ,EAAe;QACpB,OAAO,CAACL,CAAC,GAAGK,CAAJ,GAAQ,CAAT,EAAYD,CAAZ,CAAP;MACD,CAFD;;IAIF;MACE,OAAO,IAAP;EAzCJ;AA2CD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,eAAT,CAAyBX,GAAzB,EAA8BY,KAA9B,EAAqCC,MAArC,EAA6CC,cAA7C,EAA6D;EAC3D;EACA;EACA,IAAMC,KAAK,GAAGf,GAAG,CAACgB,MAAJ,CAAWC,IAAzB;EACA,IAAMC,MAAM,GAAGlB,GAAG,CAACgB,MAAJ,CAAWJ,KAA1B;EAEA,IAAMK,IAAI,GAAGE,MAAM,CAACC,KAAP,CAAaL,KAAK,CAACM,MAAnB,CAAb;;EAEA,KAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,KAApB,EAA2BH,CAAC,EAA5B,EAAgC;IAC9B,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,MAApB,EAA4BH,CAAC,EAA7B,EAAiC;MAC/B,sBAAiBI,cAAc,CAACL,CAAD,EAAIC,CAAJ,CAA/B;MAAA;MAAA,IAAOY,EAAP;MAAA,IAAWC,EAAX;;MAEA,IAAMC,GAAG,GAAIZ,KAAK,GAAGF,CAAR,GAAYD,CAAb,IAAmB,CAA/B;;MACA,IAAMgB,IAAI,GAAIP,MAAM,GAAGK,EAAT,GAAcD,EAAf,IAAsB,CAAnC;;MAEA,IAAMI,KAAK,GAAGX,KAAK,CAACY,YAAN,CAAmBF,IAAnB,CAAd;;MACAR,IAAI,CAACW,aAAL,CAAmBF,KAAnB,EAA0BF,GAA1B;IACD;EACF;;EAEDxB,GAAG,CAACgB,MAAJ,CAAWC,IAAX,GAAkBA,IAAlB;EACAjB,GAAG,CAACgB,MAAJ,CAAWJ,KAAX,GAAmBA,KAAnB;EACAZ,GAAG,CAACgB,MAAJ,CAAWH,MAAX,GAAoBA,MAApB;AACD;AAED;AACA;AACA;AACA;;;AACA,SAASgB,UAAT,CAAoB7B,GAApB,EAAyB;EACvB,IAAID,kBAAkB,CAACC,GAAD,CAAlB,GAA0B,CAA9B,EAAiC;EAEjC,IAAMc,cAAc,GAAGV,gCAAgC,CAACJ,GAAD,CAAvD;EACA,IAAM8B,cAAc,GAAG/B,kBAAkB,CAACC,GAAD,CAAlB,GAA0B,CAAjD;EAEA,IAAM+B,QAAQ,GAAGD,cAAc,GAAG9B,GAAG,CAACgB,MAAJ,CAAWH,MAAd,GAAuBb,GAAG,CAACgB,MAAJ,CAAWJ,KAAjE;EACA,IAAMoB,SAAS,GAAGF,cAAc,GAAG9B,GAAG,CAACgB,MAAJ,CAAWJ,KAAd,GAAsBZ,GAAG,CAACgB,MAAJ,CAAWH,MAAjE;EAEAF,eAAe,CAACX,GAAD,EAAM+B,QAAN,EAAgBC,SAAhB,EAA2BlB,cAA3B,CAAf;AACD,C,CAED;;;AACO,SAASmB,WAAT,CAAqBhB,IAArB,EAA2BvB,IAA3B,EAAiCwC,EAAjC,EAAqC;EAAA;;EAC1C1C,iBAAiB,CAACyB,IAAD,EAAOvB,IAAP,CAAjB,CAA8ByC,IAA9B,CACE,UAAAvC,IAAI,EAAI;IACN,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;MAC5B,OAAOsC,EAAE,CAAC,IAAIE,KAAJ,CAAU,qCAAqC1C,IAArC,GAA4C,GAAtD,CAAD,CAAT;IACD;;IAED,KAAI,CAAC2C,aAAL,GAAqBzC,IAAI,CAAC0C,WAAL,EAArB;;IAEA,IAAI;MACF,IAAM1C,KAAI,GAAG,KAAI,CAAC2C,OAAL,EAAb;;MAEA,IAAI,KAAI,CAACC,WAAL,CAAiBC,QAAjB,CAA0B7C,KAA1B,CAAJ,EAAqC;QACnC,KAAI,CAACoB,MAAL,GAAc,KAAI,CAACwB,WAAL,CAAiBC,QAAjB,CAA0B7C,KAA1B,EAAgCqB,IAAhC,CAAd;MACD,CAFD,MAEO;QACL,OAAOyB,iBAAA,CAAWC,IAAX,CAAgB,KAAhB,EAAsB,4BAA4B/C,KAAlD,EAAwDsC,EAAxD,CAAP;MACD;IACF,CARD,CAQE,OAAOU,KAAP,EAAc;MACd,OAAOV,EAAE,CAACS,IAAH,CAAQ,KAAR,EAAcC,KAAd,EAAqB,KAArB,CAAP;IACD;;IAED,IAAI;MACF,KAAI,CAAC3C,KAAL,GAAa4C,sBAAA,CAAWC,MAAX,CAAkB7B,IAAlB,EAAwB8B,KAAxB,EAAb;MACAlB,UAAU,CAAC,KAAD,CAAV,CAFE,CAEgB;IACnB,CAHD,CAGE,OAAOe,KAAP,EAAc;MACd;IACD;;IAEDV,EAAE,CAACS,IAAH,CAAQ,KAAR,EAAc,IAAd,EAAoB,KAApB;IAEA,OAAO,KAAP;EACD,CA9BH,EA+BE,UAAAC,KAAK,EAAI;IACPV,EAAE,CACA,IAAIE,KAAJ,CACE,qCAAqC1C,IAArC,GAA4C,IAA5C,GAAmDkD,KAAK,CAACI,OAD3D,CADA,CAAF;EAKD,CArCH;AAuCD;;AAED,SAASC,6BAAT,CAAuCC,IAAvC,EAA6CC,KAA7C,EAAoD;EAClD,OAAO,IAAID,IAAJ,CACLC,KAAK,CAACnC,MAAN,CAAaJ,KADR,EAELuC,KAAK,CAACnC,MAAN,CAAaH,MAFR,EAGLsC,KAAK,CAACC,WAHD,EAILC,SAJK,CAIKF,KAJL,EAIY,CAJZ,EAIe,CAJf,EAIkBnC,MAJzB;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASsC,SAAT,CAAmB1D,IAAnB,EAAyBsC,EAAzB,EAA6B;EAClC,IAAItC,IAAI,KAAK2D,SAAS,CAACC,IAAvB,EAA6B;IAC3B;IACA5D,IAAI,GAAG,KAAK2C,OAAL,EAAP;EACD;;EAED,IAAI,OAAO3C,IAAP,KAAgB,QAApB,EAA8B;IAC5B,OAAO8C,iBAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+CT,EAA/C,CAAP;EACD;;EAED,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;IAC5B,OAAOQ,iBAAA,CAAWC,IAAX,CAAgB,IAAhB,EAAsB,uBAAtB,EAA+CT,EAA/C,CAAP;EACD;;EAEDtC,IAAI,GAAGA,IAAI,CAAC0C,WAAL,EAAP;;EAEA,IAAI,KAAKmB,KAAL,IAAc,KAAKjB,WAAL,CAAiBkB,QAAjB,CAA0B9D,IAA1B,CAAlB,EAAmD;IACjD,KAAKoB,MAAL,CAAYC,IAAZ,GAAmBE,MAAM,CAACwC,IAAP,CAAY,KAAK3C,MAAL,CAAYC,IAAxB,CAAnB;EACD,CAFD,MAEO;IACL;IACA;IACA,KAAKD,MAAL,CAAYC,IAAZ,GAAmBgC,6BAA6B,CAC9C,KAAKT,WADyC,EAE9C,IAF8C,CAA7B,CAGjBvB,IAHF;EAID;;EAED,IAAI,KAAKuB,WAAL,CAAiBoB,QAAjB,CAA0BhE,IAA1B,CAAJ,EAAqC;IACnC,IAAMH,MAAM,GAAG,KAAK+C,WAAL,CAAiBoB,QAAjB,CAA0BhE,IAA1B,EAAgC,IAAhC,CAAf;IACAsC,EAAE,CAACS,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoBlD,MAApB;EACD,CAHD,MAGO;IACLyC,EAAE,CAACS,IAAH,CAAQ,IAAR,EAAc,4BAA4B/C,IAA1C;EACD;;EAED,OAAO,IAAP;AACD;;AAEM,SAASiE,cAAT,CAAwBjE,IAAxB,EAA8B;EACnC,OAAO,IAAAkE,qBAAA,EAAUR,SAAV,EAAqB,IAArB,EAA2B1D,IAA3B,CAAP;AACD"}