{"version":3,"file":"jgd.js","names":["decode","jgd","bitmap","width","height","length","data","Buffer","alloc","i","writeUInt32BE","encode","row","col","r","g","b","a","color","push"],"sources":["../src/jgd.js"],"sourcesContent":["/*\nJGD - JS Graphic Description\nThis is a simple pixel based image representation, focused on simplify\ntesting through the possibility of a code friendly image definition in\njavascript notation. This can also helps Jimp users to add icons and other\nsimple images in their script code.\n\nBasically, JGD is a js object width `width`, `height` and `data`, where `data`\nis an array of integers, each representing a RGBA pixel. This is simpler then\nwrite a Buffer and we can use variables to make some \"visual image code\", like\na XPM code.\n\nfunction donutJGD() {\n    //Pallet  RRGGBBAA\n    const _ = 0xFFFFFF00,\n        i = 0xFF880088,\n        X = 0xFF8800FF;\n    return {\n        width: 10, height: 10,\n        data: [\n            _,_,_,_,_,_,_,_,_,_,\n            _,_,_,i,X,X,i,_,_,_,\n            _,_,X,X,X,X,X,X,_,_,\n            _,i,X,X,i,i,X,X,i,_,\n            _,X,X,i,_,_,i,X,X,_,\n            _,X,X,i,_,_,i,X,X,_,\n            _,i,X,X,i,i,X,X,i,_,\n            _,_,X,X,X,X,X,X,_,_,\n            _,_,_,i,X,X,i,_,_,_,\n            _,_,_,_,_,_,_,_,_,_\n        ]\n    };\n}\n\nnew Jimp(donutJGD(), function (err, image) {\n    this.write(\"/tmp/donut.png\");\n});\n*/\n\nfunction decode(jgd) {\n  const bitmap = { width: jgd.width, height: jgd.height };\n  const length = jgd.width * jgd.height;\n  bitmap.data = Buffer.alloc(length * 4);\n\n  for (let i = 0; i < length; i++) {\n    bitmap.data.writeUInt32BE(jgd.data[i], i * 4);\n  }\n\n  return bitmap;\n}\n\nfunction encode(bitmap) {\n  const jgd = { width: bitmap.width, height: bitmap.height, data: [] };\n\n  for (let row = 0; row < bitmap.height; row++) {\n    for (let col = 0; col < bitmap.width; col++) {\n      const i = (bitmap.width * row + col) << 2;\n      const r = bitmap.data[i + 0];\n      const g = bitmap.data[i + 1];\n      const b = bitmap.data[i + 2];\n      const a = bitmap.data[i + 3];\n      const color =\n        ((((r & 0xff) << 24) >>> 0) |\n          ((g & 0xff) << 16) |\n          ((b & 0xff) << 8) |\n          (a & 0xff)) >>>\n        0;\n      jgd.data.push(color);\n    }\n  }\n\n  return jgd;\n}\n\nexport default {\n  encode,\n  decode\n};\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,MAAT,CAAgBC,GAAhB,EAAqB;EACnB,IAAMC,MAAM,GAAG;IAAEC,KAAK,EAAEF,GAAG,CAACE,KAAb;IAAoBC,MAAM,EAAEH,GAAG,CAACG;EAAhC,CAAf;EACA,IAAMC,MAAM,GAAGJ,GAAG,CAACE,KAAJ,GAAYF,GAAG,CAACG,MAA/B;EACAF,MAAM,CAACI,IAAP,GAAcC,MAAM,CAACC,KAAP,CAAaH,MAAM,GAAG,CAAtB,CAAd;;EAEA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAApB,EAA4BI,CAAC,EAA7B,EAAiC;IAC/BP,MAAM,CAACI,IAAP,CAAYI,aAAZ,CAA0BT,GAAG,CAACK,IAAJ,CAASG,CAAT,CAA1B,EAAuCA,CAAC,GAAG,CAA3C;EACD;;EAED,OAAOP,MAAP;AACD;;AAED,SAASS,MAAT,CAAgBT,MAAhB,EAAwB;EACtB,IAAMD,GAAG,GAAG;IAAEE,KAAK,EAAED,MAAM,CAACC,KAAhB;IAAuBC,MAAM,EAAEF,MAAM,CAACE,MAAtC;IAA8CE,IAAI,EAAE;EAApD,CAAZ;;EAEA,KAAK,IAAIM,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGV,MAAM,CAACE,MAA/B,EAAuCQ,GAAG,EAA1C,EAA8C;IAC5C,KAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAGX,MAAM,CAACC,KAA/B,EAAsCU,GAAG,EAAzC,EAA6C;MAC3C,IAAMJ,CAAC,GAAIP,MAAM,CAACC,KAAP,GAAeS,GAAf,GAAqBC,GAAtB,IAA8B,CAAxC;MACA,IAAMC,CAAC,GAAGZ,MAAM,CAACI,IAAP,CAAYG,CAAC,GAAG,CAAhB,CAAV;MACA,IAAMM,CAAC,GAAGb,MAAM,CAACI,IAAP,CAAYG,CAAC,GAAG,CAAhB,CAAV;MACA,IAAMO,CAAC,GAAGd,MAAM,CAACI,IAAP,CAAYG,CAAC,GAAG,CAAhB,CAAV;MACA,IAAMQ,CAAC,GAAGf,MAAM,CAACI,IAAP,CAAYG,CAAC,GAAG,CAAhB,CAAV;MACA,IAAMS,KAAK,GACT,CAAG,CAACJ,CAAC,GAAG,IAAL,KAAc,EAAf,KAAuB,CAAxB,GACE,CAACC,CAAC,GAAG,IAAL,KAAc,EADhB,GAEE,CAACC,CAAC,GAAG,IAAL,KAAc,CAFhB,GAGEC,CAAC,GAAG,IAHP,MAIA,CALF;MAMAhB,GAAG,CAACK,IAAJ,CAASa,IAAT,CAAcD,KAAd;IACD;EACF;;EAED,OAAOjB,GAAP;AACD;;eAEc;EACbU,MAAM,EAANA,MADa;EAEbX,MAAM,EAANA;AAFa,C"}