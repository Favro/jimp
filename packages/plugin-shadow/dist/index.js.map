{"version":3,"file":"index.js","names":["shadow","options","cb","opacity","size","x","y","blur","orig","clone","scan","bitmap","width","height","idx","data","constructor","limit255","resize","composite","isNodePattern","call"],"sources":["../src/index.js"],"sourcesContent":["import { isNodePattern } from '@jimp/utils';\n\n/**\n * Creates a circle out of an image.\n * @param {function(Error, Jimp)} options (optional)\n * opacity - opacity of the shadow between 0 and 1\n * size,- of the shadow\n * blur - how blurry the shadow is\n * x- x position of shadow\n * y - y position of shadow\n * @param {function(Error, Jimp)} cb (optional) a callback for when complete\n * @returns {Jimp} this for chaining of methods\n */\nexport default () => ({\n  shadow(options = {}, cb) {\n    if (typeof options === 'function') {\n      cb = options;\n      options = {};\n    }\n\n    const { opacity = 0.7, size = 1.1, x = -25, y = 25, blur = 5 } = options;\n\n    // clone the image\n    const orig = this.clone();\n    const shadow = this.clone();\n\n    // turn all it's pixels black\n    shadow.scan(\n      0,\n      0,\n      shadow.bitmap.width,\n      shadow.bitmap.height,\n      (x, y, idx) => {\n        shadow.bitmap.data[idx] = 0x00;\n        shadow.bitmap.data[idx + 1] = 0x00;\n        shadow.bitmap.data[idx + 2] = 0x00;\n        // up the opacity a little,\n        shadow.bitmap.data[idx + 3] = shadow.constructor.limit255(\n          shadow.bitmap.data[idx + 3] * opacity\n        );\n\n        this.bitmap.data[idx] = 0x00;\n        this.bitmap.data[idx + 1] = 0x00;\n        this.bitmap.data[idx + 2] = 0x00;\n        this.bitmap.data[idx + 3] = 0x00;\n      }\n    );\n\n    // enlarge it. This creates a \"shadow\".\n    shadow\n      .resize(shadow.bitmap.width * size, shadow.bitmap.height * size)\n      .blur(blur);\n\n    // Then blit the \"shadow\" onto the background and the image on top of that.\n    this.composite(shadow, x, y);\n    this.composite(orig, 0, 0);\n\n    if (isNodePattern(cb)) {\n      cb.call(this, null, this);\n    }\n\n    return this;\n  }\n});\n"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;eACe;EAAA,OAAO;IACpBA,MADoB,oBACK;MAAA;;MAAA,IAAlBC,OAAkB,uEAAR,EAAQ;MAAA,IAAJC,EAAI;;MACvB,IAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;QACjCC,EAAE,GAAGD,OAAL;QACAA,OAAO,GAAG,EAAV;MACD;;MAED,eAAiEA,OAAjE;MAAA,gCAAQE,OAAR;MAAA,IAAQA,OAAR,iCAAkB,GAAlB;MAAA,6BAAuBC,IAAvB;MAAA,IAAuBA,IAAvB,8BAA8B,GAA9B;MAAA,0BAAmCC,CAAnC;MAAA,IAAmCA,CAAnC,2BAAuC,CAAC,EAAxC;MAAA,0BAA4CC,CAA5C;MAAA,IAA4CA,CAA5C,2BAAgD,EAAhD;MAAA,6BAAoDC,IAApD;MAAA,IAAoDA,IAApD,8BAA2D,CAA3D,iBANuB,CAQvB;;MACA,IAAMC,IAAI,GAAG,KAAKC,KAAL,EAAb;MACA,IAAMT,MAAM,GAAG,KAAKS,KAAL,EAAf,CAVuB,CAYvB;;MACAT,MAAM,CAACU,IAAP,CACE,CADF,EAEE,CAFF,EAGEV,MAAM,CAACW,MAAP,CAAcC,KAHhB,EAIEZ,MAAM,CAACW,MAAP,CAAcE,MAJhB,EAKE,UAACR,CAAD,EAAIC,CAAJ,EAAOQ,GAAP,EAAe;QACbd,MAAM,CAACW,MAAP,CAAcI,IAAd,CAAmBD,GAAnB,IAA0B,IAA1B;QACAd,MAAM,CAACW,MAAP,CAAcI,IAAd,CAAmBD,GAAG,GAAG,CAAzB,IAA8B,IAA9B;QACAd,MAAM,CAACW,MAAP,CAAcI,IAAd,CAAmBD,GAAG,GAAG,CAAzB,IAA8B,IAA9B,CAHa,CAIb;;QACAd,MAAM,CAACW,MAAP,CAAcI,IAAd,CAAmBD,GAAG,GAAG,CAAzB,IAA8Bd,MAAM,CAACgB,WAAP,CAAmBC,QAAnB,CAC5BjB,MAAM,CAACW,MAAP,CAAcI,IAAd,CAAmBD,GAAG,GAAG,CAAzB,IAA8BX,OADF,CAA9B;QAIA,KAAI,CAACQ,MAAL,CAAYI,IAAZ,CAAiBD,GAAjB,IAAwB,IAAxB;QACA,KAAI,CAACH,MAAL,CAAYI,IAAZ,CAAiBD,GAAG,GAAG,CAAvB,IAA4B,IAA5B;QACA,KAAI,CAACH,MAAL,CAAYI,IAAZ,CAAiBD,GAAG,GAAG,CAAvB,IAA4B,IAA5B;QACA,KAAI,CAACH,MAAL,CAAYI,IAAZ,CAAiBD,GAAG,GAAG,CAAvB,IAA4B,IAA5B;MACD,CAlBH,EAbuB,CAkCvB;;MACAd,MAAM,CACHkB,MADH,CACUlB,MAAM,CAACW,MAAP,CAAcC,KAAd,GAAsBR,IADhC,EACsCJ,MAAM,CAACW,MAAP,CAAcE,MAAd,GAAuBT,IAD7D,EAEGG,IAFH,CAEQA,IAFR,EAnCuB,CAuCvB;;MACA,KAAKY,SAAL,CAAenB,MAAf,EAAuBK,CAAvB,EAA0BC,CAA1B;MACA,KAAKa,SAAL,CAAeX,IAAf,EAAqB,CAArB,EAAwB,CAAxB;;MAEA,IAAI,IAAAY,oBAAA,EAAclB,EAAd,CAAJ,EAAuB;QACrBA,EAAE,CAACmB,IAAH,CAAQ,IAAR,EAAc,IAAd,EAAoB,IAApB;MACD;;MAED,OAAO,IAAP;IACD;EAjDmB,CAAP;AAAA,C"}