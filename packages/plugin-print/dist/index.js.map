{"version":3,"file":"index.js","names":["xOffsetBasedOnAlignment","constants","font","line","maxWidth","alignment","HORIZONTAL_ALIGN_LEFT","HORIZONTAL_ALIGN_CENTER","measureText","drawCharacter","image","x","y","char","width","height","characterPage","pages","page","blit","xoffset","yoffset","printText","text","defaultCharWidth","i","length","chars","test","fontChar","fontKerning","kernings","kerning","xadvance","splitLines","words","split","lines","currentLine","longestLine","forEach","word","join","push","loadPages","Jimp","dir","newPages","map","read","Promise","all","process","env","DIRNAME","__dirname","measureTextHeight","FONT_SANS_8_BLACK","Path","FONT_SANS_10_BLACK","FONT_SANS_12_BLACK","FONT_SANS_14_BLACK","FONT_SANS_16_BLACK","FONT_SANS_32_BLACK","FONT_SANS_64_BLACK","FONT_SANS_128_BLACK","FONT_SANS_8_WHITE","FONT_SANS_16_WHITE","FONT_SANS_32_WHITE","FONT_SANS_64_WHITE","FONT_SANS_128_WHITE","loadFont","file","cb","throwError","call","resolve","reject","err","bMFont","String","fromCharCode","id","firstString","first","second","amount","dirname","then","common","info","print","maxHeight","Infinity","alignmentX","alignmentY","undefined","constructor","VERTICAL_ALIGN_TOP","toString","VERTICAL_ALIGN_BOTTOM","VERTICAL_ALIGN_MIDDLE","Object","entries","lineString","alignmentWidth","lineHeight","isNodePattern"],"sources":["../src/index.js"],"sourcesContent":["import Path from 'path';\nimport bMFont from 'load-bmfont';\nimport { isNodePattern, throwError } from '@jimp/utils';\nimport { measureText, measureTextHeight } from './measure-text';\n\nfunction xOffsetBasedOnAlignment(constants, font, line, maxWidth, alignment) {\n  if (alignment === constants.HORIZONTAL_ALIGN_LEFT) {\n    return 0;\n  }\n\n  if (alignment === constants.HORIZONTAL_ALIGN_CENTER) {\n    return (maxWidth - measureText(font, line)) / 2;\n  }\n\n  return maxWidth - measureText(font, line);\n}\n\nfunction drawCharacter(image, font, x, y, char) {\n  if (char.width > 0 && char.height > 0) {\n    const characterPage = font.pages[char.page];\n\n    image.blit(\n      characterPage,\n      x + char.xoffset,\n      y + char.yoffset,\n      char.x,\n      char.y,\n      char.width,\n      char.height\n    );\n  }\n\n  return image;\n}\n\nfunction printText(font, x, y, text, defaultCharWidth) {\n  for (let i = 0; i < text.length; i++) {\n    let char;\n\n    if (font.chars[text[i]]) {\n      char = text[i];\n    } else if (/\\s/.test(text[i])) {\n      char = '';\n    } else {\n      char = '?';\n    }\n\n    const fontChar = font.chars[char] || {};\n    const fontKerning = font.kernings[char];\n\n    drawCharacter(this, font, x, y, fontChar || {});\n\n    const kerning =\n      fontKerning && fontKerning[text[i + 1]] ? fontKerning[text[i + 1]] : 0;\n\n    x += kerning + (fontChar.xadvance || defaultCharWidth);\n  }\n}\n\nfunction splitLines(font, text, maxWidth) {\n  const words = text.split(' ');\n  const lines = [];\n  let currentLine = [];\n  let longestLine = 0;\n\n  words.forEach(word => {\n    const line = [...currentLine, word].join(' ');\n    const length = measureText(font, line);\n\n    if (length <= maxWidth) {\n      if (length > longestLine) {\n        longestLine = length;\n      }\n\n      currentLine.push(word);\n    } else {\n      lines.push(currentLine);\n      currentLine = [word];\n    }\n  });\n\n  lines.push(currentLine);\n\n  return {\n    lines,\n    longestLine\n  };\n}\n\nfunction loadPages(Jimp, dir, pages) {\n  const newPages = pages.map(page => {\n    return Jimp.read(dir + '/' + page);\n  });\n\n  return Promise.all(newPages);\n}\n\nconst dir = process.env.DIRNAME || `${__dirname}/../`;\n\nexport default () => ({\n  constants: {\n    measureText,\n    measureTextHeight,\n    FONT_SANS_8_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-black/open-sans-8-black.fnt'\n    ),\n    FONT_SANS_10_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-10-black/open-sans-10-black.fnt'\n    ),\n    FONT_SANS_12_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-12-black/open-sans-12-black.fnt'\n    ),\n    FONT_SANS_14_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-14-black/open-sans-14-black.fnt'\n    ),\n    FONT_SANS_16_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-black/open-sans-16-black.fnt'\n    ),\n    FONT_SANS_32_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-black/open-sans-32-black.fnt'\n    ),\n    FONT_SANS_64_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-black/open-sans-64-black.fnt'\n    ),\n    FONT_SANS_128_BLACK: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-black/open-sans-128-black.fnt'\n    ),\n\n    FONT_SANS_8_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-8-white/open-sans-8-white.fnt'\n    ),\n    FONT_SANS_16_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-16-white/open-sans-16-white.fnt'\n    ),\n    FONT_SANS_32_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-32-white/open-sans-32-white.fnt'\n    ),\n    FONT_SANS_64_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-64-white/open-sans-64-white.fnt'\n    ),\n    FONT_SANS_128_WHITE: Path.join(\n      dir,\n      'fonts/open-sans/open-sans-128-white/open-sans-128-white.fnt'\n    ),\n\n    /**\n     * Loads a bitmap font from a file\n     * @param {string} file the file path of a .fnt file\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the font is loaded\n     * @returns {Promise} a promise\n     */\n    loadFont(file, cb) {\n      if (typeof file !== 'string')\n        return throwError.call(this, 'file must be a string', cb);\n\n      return new Promise((resolve, reject) => {\n        cb =\n          cb ||\n          function(err, font) {\n            if (err) reject(err);\n            else resolve(font);\n          };\n\n        bMFont(file, (err, font) => {\n          const chars = {};\n          const kernings = {};\n\n          if (err) {\n            return throwError.call(this, err, cb);\n          }\n\n          for (let i = 0; i < font.chars.length; i++) {\n            chars[String.fromCharCode(font.chars[i].id)] = font.chars[i];\n          }\n\n          for (let i = 0; i < font.kernings.length; i++) {\n            const firstString = String.fromCharCode(font.kernings[i].first);\n            kernings[firstString] = kernings[firstString] || {};\n            kernings[firstString][\n              String.fromCharCode(font.kernings[i].second)\n            ] = font.kernings[i].amount;\n          }\n\n          loadPages(this, Path.dirname(file), font.pages).then(pages => {\n            cb(null, {\n              chars,\n              kernings,\n              pages,\n              common: font.common,\n              info: font.info\n            });\n          });\n        });\n      });\n    }\n  },\n\n  class: {\n    /**\n     * Draws a text on a image on a given boundary\n     * @param {Jimp} font a bitmap font loaded from `Jimp.loadFont` command\n     * @param {number} x the x position to start drawing the text\n     * @param {number} y the y position to start drawing the text\n     * @param {any} text the text to draw (string or object with `text`, `alignmentX`, and/or `alignmentY`)\n     * @param {number} maxWidth (optional) the boundary width to draw in\n     * @param {number} maxHeight (optional) the boundary height to draw in\n     * @param {function(Error, Jimp)} cb (optional) a function to call when the text is written\n     * @returns {Jimp} this for chaining of methods\n     */\n    print(font, x, y, text, maxWidth, maxHeight, cb) {\n      if (typeof maxWidth === 'function' && typeof cb === 'undefined') {\n        cb = maxWidth;\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxWidth === 'undefined') {\n        maxWidth = Infinity;\n      }\n\n      if (typeof maxHeight === 'function' && typeof cb === 'undefined') {\n        cb = maxHeight;\n        maxHeight = Infinity;\n      }\n\n      if (typeof maxHeight === 'undefined') {\n        maxHeight = Infinity;\n      }\n\n      if (typeof font !== 'object') {\n        return throwError.call(this, 'font must be a Jimp loadFont', cb);\n      }\n\n      if (\n        typeof x !== 'number' ||\n        typeof y !== 'number' ||\n        typeof maxWidth !== 'number'\n      ) {\n        return throwError.call(this, 'x, y and maxWidth must be numbers', cb);\n      }\n\n      if (typeof maxWidth !== 'number') {\n        return throwError.call(this, 'maxWidth must be a number', cb);\n      }\n\n      if (typeof maxHeight !== 'number') {\n        return throwError.call(this, 'maxHeight must be a number', cb);\n      }\n\n      let alignmentX;\n      let alignmentY;\n\n      if (\n        typeof text === 'object' &&\n        text.text !== null &&\n        text.text !== undefined\n      ) {\n        alignmentX = text.alignmentX || this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = text.alignmentY || this.constructor.VERTICAL_ALIGN_TOP;\n        ({ text } = text);\n      } else {\n        alignmentX = this.constructor.HORIZONTAL_ALIGN_LEFT;\n        alignmentY = this.constructor.VERTICAL_ALIGN_TOP;\n        text = text.toString();\n      }\n\n      if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_BOTTOM\n      ) {\n        y += maxHeight - measureTextHeight(font, text, maxWidth);\n      } else if (\n        maxHeight !== Infinity &&\n        alignmentY === this.constructor.VERTICAL_ALIGN_MIDDLE\n      ) {\n        y += maxHeight / 2 - measureTextHeight(font, text, maxWidth) / 2;\n      }\n\n      const defaultCharWidth = Object.entries(font.chars)[0][1].xadvance;\n      const { lines, longestLine } = splitLines(font, text, maxWidth);\n\n      lines.forEach(line => {\n        const lineString = line.join(' ');\n        const alignmentWidth = xOffsetBasedOnAlignment(\n          this.constructor,\n          font,\n          lineString,\n          maxWidth,\n          alignmentX\n        );\n\n        printText.call(\n          this,\n          font,\n          x + alignmentWidth,\n          y,\n          lineString,\n          defaultCharWidth\n        );\n\n        y += font.common.lineHeight;\n      });\n\n      if (isNodePattern(cb)) {\n        cb.call(this, null, this, { x: x + longestLine, y });\n      }\n\n      return this;\n    }\n  }\n});\n"],"mappings":"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"}